class Solution {
    // 188 Hard 买卖股票的最佳时机Ⅳ best-time-to-buy-and-sell-stock-iv
    // 上课的思路
    public int maxProfit(int k, int[] prices) {
        if (k == 0 || prices.length == 0)
            return 0;
        int[][][] dp = new int[prices.length][2][k + 1];
        
        // 边界
        for (int i = 0; i <= k; i++) {
            dp[0][0][i] = 0;
            dp[0][1][i] = -prices[0];
        }

        for (int i = 1; i < prices.length; i++) {
            for (int j = 0; j <= k; j++) {
                // 未持有，前一天未持有 或 今天卖出，完成一次交易
                if (j > 0)
                    dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j - 1] + prices[i]);
                else
                    dp[i][0][j] = dp[i - 1][0][j];
                // 持有，前一天持有 或 今天买入
                dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j] - prices[i]);
            }
        }

        // find ans
        int ans = 0;
        for (int i = 0; i <= k; i++)
            ans = Math.max(ans, dp[prices.length - 1][0][i]);
        return ans;
    }
    
    // 优化dp
    public int maxProfit(int k, int[] prices) {
        if (k == 0 || prices.length == 0)
            return 0;
        int[] buy = new int[k + 1];
        int[] sell = new int[k + 1];

        // 边界
        for (int i = 0; i <= k; i++) {
            buy[i] = -prices[0];
            sell[i] = 0;
        }

        for (int i = 1; i < prices.length; i++) {
            for (int j = 0; j <= k; j++) {
                // 未持有，前一天未持有 或 今天卖出，完成一次交易
                if (j > 0)
                    sell[j] = Math.max(sell[j], buy[j - 1] + prices[i]);
                // 持有，前一天持有 或 今天买入
                buy[j] = Math.max(buy[j], sell[j] - prices[i]);
            }
        }
        
        // get ans
        int ans = 0;
        for (int i = 0; i <= k; i++)
            ans = Math.max(ans, sell[i]);
        return ans;
    }
}

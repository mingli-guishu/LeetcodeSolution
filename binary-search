class Solution {
    // 704 Easy 二分查找 binary-search
    // 迭代
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (nums[mid] == target)
                return mid;
            if (nums[mid] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return -1;
    }
    
    // 递归
    int[] nums;
    public int search(int[] nums, int target) {
        this.nums = nums;
        return search_2(target, 0, nums.length - 1);
    }

    private int search_2(int target, int l, int r) {
        if (l > r)
            return -1;
        int mid = (l + r) / 2;
        if (nums[mid] == target)
            return mid;
        else if (nums[mid] < target)
            return search_2(target, mid + 1, r);
        else
            return search_2(target, l, mid - 1);
    }
}

class Solution {
    // 72 Hard 编辑距离 edit-distance
    // dp非优化
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        if (len1 * len2 == 0)
            return len1 + len2;
        int[][] dp = new int[len1 + 1][len2 + 1];
        
        for (int i = 0; i <= len1; i++)
            dp[i][0] = i;
        for (int j = 0; j <= len2; j++)
            dp[0][j] = j;
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1))
                    dp[i][j] = Math.min(dp[i - 1][j - 1], 1 + Math.min(dp[i - 1][j], dp[i][j - 1]));
                else
                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));
            }
        }
        return dp[len1][len2];
    }
    
    // dp优化
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        if (len1 * len2 == 0)
            return len1 + len2;
        int[] dp = new int[len2 + 1];
        
        for (int j = 0; j <= len2; j++)
            dp[j] = j;
        for (int i = 1; i <= len1; i++) {
            int pre = dp[0];// 记录dp[i - 1][j - 1]
            dp[0] = i;
            for (int j = 1; j <= len2; j++) {
                int cur = 0;// 防止dp[j]被覆盖
                if (word1.charAt(i - 1) == word2.charAt(j - 1))
                    cur = Math.min(pre, 1 + Math.min(dp[j], dp[j - 1]));
                else
                    cur = 1 + Math.min(pre, Math.min(dp[j], dp[j - 1]));
                pre = dp[j];
                dp[j] = cur;
            }
        }
        return dp[len2];
    }
}

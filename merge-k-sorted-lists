class Solution {
    // 23 Hard 合并K个升序链表 merge-k-sorted-lists
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        return merge(lists, 0, lists.length - 1);
    }

    private ListNode merge (ListNode[] lists, int left, int right) {
        // 两个终止条件
        if (left == right)
            return lists[left];
        if (right - left == 1)
            return merge_2Lists(lists[left], lists[right]);
        int mid = (left + right) / 2;
        return merge_2Lists(merge(lists, left, mid), merge(lists, mid + 1, right));
    }

    // 合并两升序于链表
    private ListNode merge_2Lists (ListNode a, ListNode b) {
        ListNode head = new ListNode(0);// 保护节点
        ListNode cur = head;
        while (a != null || b != null) {
            if (b == null || (a != null && a.val <= b.val)) {
                cur.next = a;
                a = a.next;
            } else {
                cur.next = b;
                b = b.next;
            }
            cur = cur.next;
        }
        return head.next;
    }
}

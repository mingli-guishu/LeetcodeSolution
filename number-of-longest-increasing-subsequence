class Solution {
    // Medium 最长递增子序列的个数 number-of-longest-increasing-subsequence
    public int findNumberOfLIS(int[] nums) {
        int len = nums.length;
        int ans = 0;
        int maxlen = 1;// 最大长度
        int[] length = new int[len];// 到第i个位置的最长长度
        int[] count = new int[len];// 到第i给位置的最长长度的数目
        Arrays.fill(length, 1);
        Arrays.fill(count, 1);
        for (int i = 1; i < len; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    if (length[j] + 1 > length[i]) {// 最大长度变长，count不变
                        length[i] = length[j] + 1;
                        count[i] = count[j];
                    } else if (length[j] + 1 == length[i]){// 最大长度变长不变，count增加
                        count[i] += count[j]; 
                    }
                }
            }
            maxlen = Math.max(maxlen, length[i]);
        }
        for (int i = 0; i < len; i++) 
            if (length[i] == maxlen)
                ans += count[i];
        return ans;
    }
}

class Solution {
    // 213 Medium 打家劫舍Ⅱ house-robber-ii
    // dp非优化
    public int rob(int[] nums) {
        int len = nums.length;
        if (len == 1)
            return nums[0];
        int[][] dp = new int[len][2];
        // 第一次，偷第一家，目标dp[end][0]
        int first = 0;// 第一次结果
        dp[0][0] = 0;
        dp[0][1] = nums[0];
        for (int i = 1; i < len; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = nums[i] + dp[i - 1][0];
        }
        first = dp[len - 1][0];
        // 第二次，不偷第一家，目标max(dp[end][0], dp[end][1])
        dp[0][0] = 0;
        dp[0][1] = -1000000000;// 偷了没有用
        for (int i = 1; i < len; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = nums[i] + dp[i - 1][0];
        }
        return Math.max(first, Math.max(dp[len - 1][0], dp[len - 1][1]));
    }
    
    // dp优化
    public int rob(int[] nums) {
        int len = nums.length;
        if (len == 1)
            return nums[0];
        int valid = 0, invalid = 0;
        // 第一次，偷第一家，目标dp[end][0]
        int first = 0;// 记录第一次搜索结果
        invalid = nums[0];
        for (int i = 1; i < len; i++) {
            int pre_valid = valid;
            valid = Math.max(valid, invalid);
            invalid = nums[i] + pre_valid;
        }
        first = valid;
        valid = 0;
        invalid = -1000000000;
        for (int i = 1; i < len; i++) {
            int pre_valid = valid;
            valid = Math.max(valid, invalid);
            invalid = nums[i] + pre_valid;
        }
        return Math.max(first, Math.max(valid, invalid));
    }
}

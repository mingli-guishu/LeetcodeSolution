class Solution {
    // 111 Easy 二叉树的最小深度 minimum-depth-of-binary-tree
    public int minDepth(TreeNode root) {
        // 终止条件
        if (root == null)
            return 0;
        // 递归条件
        // 与求二叉树最大深度不同，需要分类讨论循环体
        // 由于是树，终止条件仍为if(root == null)，而因为用的是Math.min，若上层节点的左右子树有null的情况，会干扰对树叶的寻找
        // 所以当左右子树都非null时，仍然用Math.min
        if (root.left != null && root.right != null)
            return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
        else 
            // 而当左右子树有null的情况时，需要跳过空子树，而不用Math.min而是用+
            // left，right至少有一个为null才用+
            return minDepth(root.left) + minDepth(root.right) + 1;
    }
}
